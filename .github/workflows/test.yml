name: Tests

on:
  pull_request:

jobs:
  test:
    # Run on Mac, Linux, and Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      shell: bash
    
    - name: Run unit tests
      run: poetry run pytest tests/unit/ -v --cov=src --cov-report=xml
      shell: bash

    # Source: https://github.com/elastio/ssstar/blob/4f82e1fe49a1b280c3767fb784b53bacd8a1fee9/.github/workflows/ci.yml#L89C7-L129C42
    - name: Cache the minio binary
      id: cache-minio
      uses: actions/cache@v4
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-minio
    - name: Install minio (Linux)
      shell: bash
      run: |
        # Download the minio binary if it's not already present
        # Most of the time the minio binary should be in the cache and doesn't need to be downloaded again
        mkdir -p $HOME/.local/bin
        cd $HOME/.local/bin
        if [[ ! -x ./minio ]]
        then
          wget https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      if: matrix.os == 'ubuntu-latest'
    - name: Install minio (mac)
      shell: bash
      run: |
        # Download the minio binary if it's not already present
        # Most of the time the minio binary should be in the cache and doesn't need to be downloaded again
        mkdir -p $HOME/.local/bin
        cd $HOME/.local/bin
        if [[ ! -x ./minio ]]
        then
          curl --progress-bar -O https://dl.min.io/server/minio/release/darwin-amd64/minio
          chmod +x minio
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      if: matrix.os == 'macos-latest'
    - name: Install minio (Windows)
      run: |
        # Download the minio binary if it's not already present
        mkdir -p C:\minio
        Invoke-WebRequest -Uri "https://dl.min.io/server/minio/release/windows-amd64/minio.exe" -OutFile "C:\minio\minio.exe"
        echo "c:\minio" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      if: matrix.os == 'windows-latest'

    - name: Start MinIO
      run: |
        mkdir -p ./minio-data
        export MINIO_ROOT_USER=secret123456789
        export MINIO_ROOT_PASSWORD=secret123456789

        minio server ./minio-data --address :9000 &

        sleep 5
      shell: bash
    
    - name: Copy environment file and configure for MinIO
      run: |
        cp .env.template .env
        # Update the endpoint URL for MinIO instead of LocalStack
        sed -i.bak 's|AWS_ENDPOINT_URL=http://localhost:4566|AWS_ENDPOINT_URL=http://localhost:9000|' .env
        # Remove the LocalStack flag
        sed -i.bak '/IS_LOCALSTACK=true/d' .env
      shell: bash
    
    - name: Run e2e tests
      run: poetry run pytest tests/e2e/ -v
      shell: bash
